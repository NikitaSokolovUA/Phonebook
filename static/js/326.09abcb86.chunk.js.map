{"version":3,"file":"static/js/326.09abcb86.chunk.js","mappings":"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","sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","components/Footer/Footer.styled.jsx","components/Footer/Footer.jsx","pages/Contacts/Contacts.styled.jsx","schema/schemaContactForm.js","components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/EditContactForm/EditContactForm.styled.jsx","components/EditContactForm/EditContactForm.jsx","hooks/useContact.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/NotLoggedInContainer/NotLoggedInContainer.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/EditMenu/EditMenu.styled.jsx","components/EditMenu/EditMenu.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Cont = styled.div`\n  width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  /* height: calc(100vh - 120px); */\n  padding: 0 15px;\n`;\n","import { Cont } from './Container.styled';\n\nconst Container = ({ children }) => {\n  return <Cont>{children}</Cont>;\n};\n\nexport default Container;\n","import styled from '@emotion/styled';\nimport { FaLinkedin, FaGithubSquare } from 'react-icons/fa';\n\nexport const FooterContainer = styled.footer`\n  width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  display: flex;\n  gap: 20px;\n  justify-content: center;\n  align-items: center;\n  height: 50px;\n  border-top: 1px solid black;\n`;\n\nexport const LinkList = styled.ul`\n  display: flex;\n  gap: 20px;\n`;\n\nexport const Link = styled.a`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  color: #afb1b8;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  /* outline: 1px solid tomato; */\n\n  :hover,\n  :focus {\n    background-color: #2196f3;\n    color: #ffffff;\n  }\n`;\n\nexport const SvgGitHub = styled(FaGithubSquare)`\n  width: 22px;\n  height: 22px;\n`;\n\nexport const SvgLinkedIn = styled(FaLinkedin)`\n  width: 22px;\n  height: 22px;\n`;\n","import {\n  FooterContainer,\n  Link,\n  LinkList,\n  SvgGitHub,\n  SvgLinkedIn,\n} from './Footer.styled';\n\nconst Footer = () => {\n  return (\n    <FooterContainer>\n      <p>Copyright Â© 2022. Created by Sokolov Mykyta.</p>\n      <LinkList>\n        <li>\n          <Link\n            href=\"https://github.com/NikitaSokolovUA\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <SvgGitHub />\n          </Link>\n        </li>\n        <li>\n          <Link\n            href=\"https://www.linkedin.com/in/sokolovnikita0309/\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <SvgLinkedIn />\n          </Link>\n        </li>\n      </LinkList>\n    </FooterContainer>\n  );\n};\n\nexport default Footer;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: #dcdcdc;\n`;\n\nexport const MainTitle = styled.h1`\n  text-align: center;\n  margin-bottom: 30px;\n  padding-top: 20px;\n  font-size: 40px;\n  letter-spacing: 0.06em;\n  color: #2196f3;\n`;\n\nexport const AddContactBtn = styled.button`\n  min-width: 136px;\n  height: 40px;\n  border: none;\n  border-radius: 5px;\n  color: #212121;\n  background-color: #f5f4fa;\n  font-weight: 700;\n  line-height: 1.19;\n  letter-spacing: 0.06em;\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    background-color: #2196f3;\n    color: #ffffff;\n    box-shadow: 0px 3px 1px rgb(0 0 0 / 10%), 0px 1px 2px rgb(0 0 0 / 8%),\n      0px 2px 2px rgb(0 0 0 / 12%);\n  }\n`;\n\nexport const ContactTitle = styled.h2`\n  text-align: center;\n  margin-top: 20px;\n  margin-bottom: 30px;\n  font-size: 30px;\n  letter-spacing: 0.06em;\n  color: #2196f3;\n`;\n","import * as yup from 'yup';\n\nconst schemaContactForm = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required().min(7, 'min 7 symbols').max(20),\n});\n\nexport default schemaContactForm;\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\nimport MaskedInput from 'react-text-mask';\n\nexport const ContactFormTitle = styled.h2`\n  text-align: center;\n  margin-bottom: 30px;\n  font-size: 25px;\n  letter-spacing: 0.06em;\n  color: #2196f3;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\nexport const LabelName = styled.label`\n  margin-left: 40px;\n  margin-bottom: 5px;\n  display: block;\n  color: #757575;\n  letter-spacing: 0.03em;\n\n  :last-of-type {\n    margin-top: 20px;\n  }\n`;\n\nexport const ErrorMsg = styled.p`\n  margin-left: 40px;\n  margin-bottom: 5px;\n  display: block;\n  color: #b21f1f;\n  letter-spacing: 0.03em;\n`;\n\nexport const Input = styled(Field)`\n  margin-left: 40px;\n  padding: 10px 20px;\n  width: 80%;\n  border: 1px solid;\n  border-color: ${props => (props.error ? '#b21f1f' : 'rgba(33, 33, 33, 0.2)')};\n  border-radius: 4px;\n  font-size: 16px;\n  letter-spacing: 0.06em;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :focus-within {\n    border: 1px solid #2196f3;\n  }\n  :focus-visible {\n    border: 1px solid #2196f3;\n    outline: none;\n  }\n`;\n\nexport const MaskInput = styled(MaskedInput)`\n  margin-left: 40px;\n  padding: 10px 20px;\n  width: 80%;\n  border: 1px solid;\n  border-color: ${props => (props.error ? '#b21f1f' : 'rgba(33, 33, 33, 0.2)')};\n  border-radius: 4px;\n  font-size: 16px;\n  letter-spacing: 0.06em;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :focus-within {\n    border: 1px solid #2196f3;\n  }\n  :focus-visible {\n    border: 1px solid #2196f3;\n    outline: none;\n  }\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  gap: 40px;\n  margin-top: 30px;\n  justify-content: center;\n`;\n\nexport const Btn = styled.button`\n  max-width: 150px;\n  padding: 12px 20px;\n  border-style: none;\n  border-radius: 5px;\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.15);\n  font-size: 17px;\n  font-weight: 500;\n  cursor: pointer;\n  outline: none;\n  color: #212121;\n  background-color: #f5f4fa;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover:enabled,\n  :focus:enabled {\n    background-color: #2196f3;\n    color: #ffffff;\n    box-shadow: 0px 3px 1px rgb(0 0 0 / 10%), 0px 1px 2px rgb(0 0 0 / 8%),\n      0px 2px 2px rgb(0 0 0 / 12%);\n  }\n\n  :disabled {\n    opacity: 0.5;\n    cursor: not-allowed !important;\n  }\n`;\n","export const selectContacts = state => state.contacts.contacts.items\nexport const selectFilter = state => state.contacts.filter\nexport const selectIsLoading = state => state.contacts.contacts.isLoading\nexport const selectError = state => state.contacts.contacts.error\n\nexport const selectFilterContacts = state => {\n    const contacts = selectContacts(state);\n    const filter = selectFilter(state);\n\n    return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n}","import { Formik, Form, ErrorMessage, Field } from 'formik';\nimport PropTypes from 'prop-types';\nimport schemaContactForm from 'schema/schemaContactForm';\nimport {\n  ContactFormTitle,\n  Input,\n  MaskInput,\n  LabelName,\n  ButtonWrapper,\n  Btn,\n  ErrorMsg,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst phoneNumberMask = [\n  '+',\n  '3',\n  '8',\n  ' ',\n  '(',\n  '0',\n  /\\d/,\n  /\\d/,\n  ')',\n  ' ',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n];\n\nconst ContactForm = ({ toggleModal }) => {\n  const InitialValues = {\n    name: '',\n    number: '',\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const onSubmitForm = (InitialValues, { resetForm }) => {\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase() === InitialValues.name.toLowerCase()\n      )\n    ) {\n      return alert(`${InitialValues.name} is already in contact list`);\n    }\n\n    dispatch(addContact(InitialValues));\n    toggleModal();\n    resetForm();\n  };\n\n  return (\n    <>\n      <ContactFormTitle>Add new contact</ContactFormTitle>\n      <Formik\n        initialValues={InitialValues}\n        validationSchema={schemaContactForm}\n        onSubmit={onSubmitForm}\n      >\n        {({ dirty, errors }) => (\n          <Form>\n            <LabelName htmlFor=\"name\">Name</LabelName>\n            <Input type=\"text\" name=\"name\" id=\"name\" error={errors.number} />\n            <ErrorMessage name=\"name\">\n              {msg => <ErrorMsg>{msg}</ErrorMsg>}\n            </ErrorMessage>\n\n            <LabelName htmlFor=\"phone\">Phone Number</LabelName>\n            <Field name=\"number\">\n              {({ field }) => (\n                <MaskInput\n                  {...field}\n                  mask={phoneNumberMask}\n                  id=\"phone\"\n                  placeholder=\"+38 (0__) ___-__-__\"\n                  type=\"text\"\n                  error={errors.number}\n                />\n              )}\n            </Field>\n            <ErrorMessage name=\"number\">\n              {msg => <ErrorMsg>{msg}</ErrorMsg>}\n            </ErrorMessage>\n\n            <ButtonWrapper>\n              <Btn type=\"reset\" disabled={!dirty}>\n                Reset\n              </Btn>\n              <Btn type=\"submit\">Submit</Btn>\n            </ButtonWrapper>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  toggleModal: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ListContact = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 30px;\n\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const ContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 300px;\n  padding: 10px 20px;\n  border: 1px solid black;\n  border-radius: 5px;\n`;\n","import styled from '@emotion/styled';\n\nexport const ContactName = styled.p`\n  font-size: 20px;\n  letter-spacing: 0.03em;\n  color: #778899;\n`;\nexport const ContactNumber = styled.p`\n  font-size: 20px;\n  letter-spacing: 0.03em;\n  color: #2f4f4f;\n`;\n\nexport const ContactListBtn = styled.li`\n  :first-of-type {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const ContactItemBtn = styled.button`\n  width: 100px;\n  height: 30px;\n  border: none;\n  border-radius: 5px;\n  font-size: 14px;\n  letter-spacing: 0.03em;\n  cursor: pointer;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    background-color: #2196f3;\n    color: white;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalWindow = styled.div`\n  position: relative;\n  background-color: white;\n  min-width: 480px;\n  border-radius: 5px;\n  padding: 20px;\n`;\n\nexport const CloseBtn = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  width: 25px;\n  height: 25px;\n  right: 10px;\n  top: 10px;\n  border-radius: 50%;\n  border: none;\n  cursor: pointer;\n  transition: background-color #2196f3 cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    background-color: #2196f3;\n    color: white;\n  }\n`;\n","import { Overlay, ModalWindow, CloseBtn } from './Modal.styled';\nimport { PropTypes } from 'prop-types';\nimport { GrFormClose } from 'react-icons/gr';\nimport { useEffect } from 'react';\n\nconst Modal = ({ toggleModal, children }) => {\n  const closeModalOnOverlay = e => {\n    if (e.target === e.currentTarget) {\n      toggleModal();\n    }\n  };\n\n  useEffect(() => {\n    const closeModalOnEscPush = e => {\n      const KEY_CODE_ESCAPE = 'Escape';\n\n      if (e.code === KEY_CODE_ESCAPE) {\n        toggleModal();\n      }\n    };\n\n    window.addEventListener('keydown', closeModalOnEscPush);\n\n    return () => window.removeEventListener('keydown', closeModalOnEscPush);\n  }, [toggleModal]);\n\n  const handleCloseModal = () => {\n    toggleModal();\n  };\n\n  return (\n    <Overlay onClick={closeModalOnOverlay}>\n      <ModalWindow>\n        <CloseBtn type=\"button\" onClick={handleCloseModal}>\n          <GrFormClose />\n        </CloseBtn>\n        {children}\n      </ModalWindow>\n    </Overlay>\n  );\n};\n\nexport default Modal;\n\nModal.propTypes = {\n  toggleModal: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const FormContainer = styled.div`\n  width: 400px;\n  padding: 20px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const ContactFormTitle = styled.h2`\n  text-align: center;\n  margin-bottom: 30px;\n  font-size: 25px;\n  letter-spacing: 0.06em;\n  color: #2196f3;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\nexport const Label = styled.label``;\nexport const LabelName = styled.span`\n  margin-left: 40px;\n  margin-bottom: 5px;\n  display: block;\n  color: #757575;\n  letter-spacing: 0.03em;\n`;\n\nexport const Input = styled(Field)`\n  margin-left: 40px;\n  padding-left: 20px;\n  width: 80%;\n  height: 40px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  font-size: 20px;\n  letter-spacing: 0.06em;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :focus-within {\n    border: 1px solid #2196f3;\n  }\n  :focus-visible {\n    border: 1px solid #2196f3;\n    outline: none;\n  }\n\n  :first-of-type {\n    margin-bottom: 40px;\n  }\n`;\n\nexport const SubmitButton = styled.button`\n  display: block;\n  margin-top: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  min-width: 136px;\n  height: 40px;\n  border: none;\n  border-radius: 5px;\n  color: #212121;\n  background-color: #f5f4fa;\n  font-weight: 700;\n  line-height: 1.19;\n  letter-spacing: 0.06em;\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    background-color: #2196f3;\n    color: #ffffff;\n    box-shadow: 0px 3px 1px rgb(0 0 0 / 10%), 0px 1px 2px rgb(0 0 0 / 8%),\n      0px 2px 2px rgb(0 0 0 / 12%);\n  }\n`;\n","import { Formik, Form, ErrorMessage } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useContact } from 'hooks/useContact';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport * as yup from 'yup';\nimport {\n  ContactFormTitle,\n  FormContainer,\n  Input,\n  SubmitButton,\n} from './EditContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().required().min(7, 'Ð¼Ð¸Ð½Ð¸Ð¼ÑÐ¼ 7 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²').max(20),\n});\n\nconst EditContactForm = ({ id, toggleModal }) => {\n  const dispatch = useDispatch();\n  const InitialValues = useContact(id);\n  const contacts = useSelector(selectContacts);\n\n  const onSubmitForm = (credentials, { resetForm }) => {\n    const submitValues = {\n      id,\n      credentials,\n    };\n    const contactsWithoutEdit = contacts.filter(contact => contact.id !== id);\n\n    if (\n      contactsWithoutEdit.find(\n        contact =>\n          contact.name.toLowerCase() ===\n          submitValues.credentials.name.toLowerCase()\n      )\n    ) {\n      return alert(\n        `${submitValues.credentials.name} is already in contact list`\n      );\n    }\n\n    dispatch(editContact(submitValues));\n    toggleModal();\n    resetForm();\n  };\n\n  return (\n    <FormContainer>\n      <ContactFormTitle>Edit Contact</ContactFormTitle>\n      <Formik\n        initialValues={InitialValues}\n        validationSchema={schema}\n        onSubmit={onSubmitForm}\n      >\n        <Form>\n          <Input type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" />\n          <Input type=\"text\" name=\"number\" />\n          <ErrorMessage name=\"number\" />\n\n          <SubmitButton type=\"submit\">Change</SubmitButton>\n        </Form>\n      </Formik>\n    </FormContainer>\n  );\n};\n\nexport default EditContactForm;\n\nEditContactForm.propTypes = {\n  id: PropTypes.string.isRequired,\n  toggleModal: PropTypes.func.isRequired,\n};\n","import { useSelector } from \"react-redux\"\nimport { selectContacts } from \"redux/contacts/selectors\";\n\nexport const useContact = (id) => {\n    const contacts = useSelector(selectContacts);\n    const {name, number} =  contacts.find(contact => contact.id === id)\n\n    return {\n        name,\n        number\n    }\n}","import PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport {\n  ContactName,\n  ContactNumber,\n  ContactListBtn,\n  ContactItemBtn,\n} from './ContactListItem.styled';\nimport { useState } from 'react';\nimport Modal from 'components/Modal';\nimport EditContactForm from 'components/EditContactForm';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {modalIsOpen && (\n        <Modal toggleModal={() => setModalIsOpen(!modalIsOpen)}>\n          <EditContactForm\n            id={id}\n            toggleModal={() => setModalIsOpen(!modalIsOpen)}\n          />\n        </Modal>\n      )}\n      <div>\n        <ContactName>{name}</ContactName>\n        <ContactNumber>{number}</ContactNumber>\n      </div>\n      <ul>\n        <ContactListBtn>\n          <ContactItemBtn\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Deleted\n          </ContactItemBtn>\n        </ContactListBtn>\n        <ContactListBtn>\n          <ContactItemBtn\n            type=\"button\"\n            onClick={() => setModalIsOpen(!modalIsOpen)}\n          >\n            Edit\n          </ContactItemBtn>\n        </ContactListBtn>\n      </ul>\n    </>\n  );\n};\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { ContactItem, ListContact } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterContacts } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport ContactListItem from 'components/ContactListItem';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilterContacts);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    dispatch(fetchContacts(controller));\n\n    return () => controller.abort();\n  }, [dispatch]);\n\n  return (\n    <ListContact>\n      {filteredContacts.map(({ id, name, number }) => {\n        return (\n          <ContactItem key={id}>\n            <ContactListItem id={id} name={name} number={number} />\n          </ContactItem>\n        );\n      })}\n    </ListContact>\n  );\n};\n\nexport default ContactList;\n","const NotLoggedInContainer = () => {\n  return <p>You must registered or log in</p>;\n};\n\nexport default NotLoggedInContainer;\n","import styled from '@emotion/styled';\n\nexport const TextTitle = styled.span`\n  display: block;\n  margin-bottom: 10px;\n  margin-left: 40px;\n  color: #000;\n  font-size: 20px;\n  letter-spacing: 0.06em;\n`;\n\nexport const SearchInput = styled.input`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  padding-left: 20px;\n  width: 300px;\n  height: 40px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  transition: border 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  font-size: 20px;\n  letter-spacing: 0.06em;\n\n  :focus-within {\n    border: 1px solid #2196f3;\n  }\n  :focus-visible {\n    border: 1px solid #2196f3;\n    outline: none;\n  }\n`;\n","import React from 'react';\nimport { SearchInput } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilterContacts } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleChange = e => {\n    dispatch(getFilterContacts(e.target.value));\n  };\n\n  return (\n    <label>\n      <SearchInput\n        placeholder=\"Find Contacts by Name\"\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-ZÐ°-ÑÐ-Ð¯]+(([' -][a-zA-ZÐ°-ÑÐ-Ð¯ ])?[a-zA-ZÐ°-ÑÐ-Ð¯]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={filter}\n        onChange={handleChange}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const EditContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nexport const AddContactBtn = styled.button`\n  min-width: 136px;\n  height: 40px;\n  border: none;\n  border-radius: 5px;\n  color: #212121;\n  background-color: #f5f4fa;\n  font-weight: 700;\n  line-height: 1.19;\n  letter-spacing: 0.06em;\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover,\n  :focus {\n    background-color: #2196f3;\n    color: #ffffff;\n    box-shadow: 0px 3px 1px rgb(0 0 0 / 10%), 0px 1px 2px rgb(0 0 0 / 8%),\n      0px 2px 2px rgb(0 0 0 / 12%);\n  }\n`;\n","import Filter from 'components/Filter';\nimport PropTypes from 'prop-types';\nimport { AddContactBtn, EditContainer } from './EditMenu.styled';\n\nconst EditMenu = ({ toggleModal }) => {\n  const handleBtnClick = () => {\n    toggleModal();\n  };\n\n  return (\n    <EditContainer>\n      <AddContactBtn type=\"button\" onClick={handleBtnClick}>\n        Add Contact\n      </AddContactBtn>\n      <Filter />\n    </EditContainer>\n  );\n};\n\nexport default EditMenu;\n\nEditMenu.propTypes = {\n  toggleModal: PropTypes.func.isRequired,\n};\n","import { ContactTitle, MainTitle } from './Contacts.styled';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport { useAuth } from 'hooks/useAuth';\nimport NotLoggedInContainer from 'components/NotLoggedInContainer';\nimport Container from 'components/Container';\nimport { useState } from 'react';\nimport Modal from 'components/Modal';\nimport EditMenu from 'components/EditMenu';\nimport Footer from 'components/Footer';\n\nconst Contacts = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <>\n      <Container>\n        {isLoggedIn ? (\n          <>\n            <MainTitle>PHONEBOOK</MainTitle>\n            {modalIsOpen && (\n              <Modal toggleModal={() => setModalIsOpen(!modalIsOpen)}>\n                <ContactForm toggleModal={() => setModalIsOpen(!modalIsOpen)} />\n              </Modal>\n            )}\n            <EditMenu toggleModal={() => setModalIsOpen(!modalIsOpen)} />\n            <ContactTitle>CONTACTS</ContactTitle>\n            <ContactList />\n          </>\n        ) : (\n          <NotLoggedInContainer />\n        )}\n      </Container>\n      <Footer />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Cont","styled","children","FooterContainer","LinkList","Link","SvgGitHub","FaGithubSquare","SvgLinkedIn","FaLinkedin","href","rel","target","MainTitle","ContactTitle","yup","shape","name","required","number","min","max","ContactFormTitle","LabelName","ErrorMsg","Input","Field","props","error","MaskInput","MaskedInput","ButtonWrapper","Btn","selectContacts","state","contacts","items","selectFilter","filter","selectFilterContacts","contact","toLowerCase","includes","phoneNumberMask","toggleModal","dispatch","useDispatch","useSelector","initialValues","validationSchema","schemaContactForm","onSubmit","InitialValues","resetForm","find","alert","addContact","dirty","errors","htmlFor","type","id","msg","field","mask","placeholder","disabled","ListContact","ContactItem","ContactName","ContactNumber","ContactListBtn","ContactItemBtn","Overlay","ModalWindow","CloseBtn","useEffect","closeModalOnEscPush","e","code","window","addEventListener","removeEventListener","onClick","currentTarget","FormContainer","SubmitButton","schema","useContact","credentials","submitValues","editContact","useState","modalIsOpen","setModalIsOpen","deleteContact","filteredContacts","controller","AbortController","fetchContacts","abort","map","SearchInput","pattern","title","value","onChange","getFilterContacts","EditContainer","AddContactBtn","isLoggedIn","useAuth","Footer"],"sourceRoot":""}